// ////////////////////////////////////////////////////////////////////////
//
// @file util-core.js
// 
// @brief Javascript implementation of basic support utilities
//
// @details 
// This file implements common client-side tools and utilities.
//
// ////////////////////////////////////////////////////////////////////////

// All modules have a name to identify themselves.
var ak_module='util-core';
var ak_cookiePrefix='jof-';


//#include "util-menu.js.h"


// ////////////////////////////////////////////////////////////////////////
// ak_setCookie() -- Set a cookie
//
// @param cName Name of the cookie to set
// @param cValue Value of the cookie to set
// @param cDays Number of days the cookie should be valid (0 for "forever")
//
// @return Nothing
//
// NOTE: For our purposes, "forever" is ~10 years
// NOTE: We expect the input to be urlencoded already.
function ak_setCookie(cName,cValue,cDays)
{
    /* Step 1: calculate expiry time */
    var edays=cDays;
    var etime=new Date();
    if ((cDays == null) || (cDays==0)) { edays=3650; }
    etime.setDate(etime.getDate()+edays);

    /* Step 2: set the cookie name */
    if (cName.substr(0,ak_cookiePrefix.length) != ak_cookiePrefix) {
        cName=ak_cookiePrefix.concat(cName);
    }

    /* Step 3: actually set the cookie */
    document.cookie=cName+'='+cValue+';expires='+etime.toUTCString();
}

// ////////////////////////////////////////////////////////////////////////
// ak_spinner() -- Show a spinner in a div
//
// @param divName Name (id) of the div to spin
// @param skinName Name of the active skin
//
// @return Nothing
//
function ak_spinner(divName,skinName)
{
    /* Step 1: build spinner href */
    var spinref="/skins/"+skinName+"/spinner.gif";

    /* Step 2: find element */
    var spindiv=document.getElemementById(divName);
    
    /* Step 3: Replace innerHTML */
    try {
        spindiv.innerHTML='<img src="'+spinref+'" alt="Waiting..."/>';
    } catch (err) {}
}


// ////////////////////////////////////////////////////////////////////////
// ak_moveElement() -- Move an element to the given coordinates
//
// @return Nothing
//
// NOTE: The main trick behind moving elements is that the style
// coordinate properties ('top','left') are _strings_ and must have
// unit specifications.
//
function ak_moveElement(ele,top,left)
{
    ele.style.top = ''+top+'px';
    ele.style.left = ''+left+'px';
}


// ////////////////////////////////////////////////////////////////////////
// svc_createXHR() -- Create a new XMLHttpRequest object
//
// @return Nothing
// NOTE: Eventually, we'll be able to trash this, but for now we support
//       older IE versions with the ActiveX hack.
//
function svc_createXHR(svc_url)
{
    var xhr;
    try {
        /* Step 1: Create base object */
        if (window.XMLHttpRequest) xhr = new XMLHttpRequest();
        else xhr = new ActiveXObject("Microsoft.XMLHTTP");

        /* Step 2: Init/open */
        xhr.open("GET",svc_url,true);
    } catch(err) {
        /* Anything goes wrong -- bail */
        return null;
    }

    /* Step 3: return it */
    return xhr;
}

// ////////////////////////////////////////////////////////////////////////
// svc_loadDiv() -- Load a DIV with the output from a service request (XHR)
//
// @return Nothing
//
function svc_loadDiv(divId,service,params)
{
    var svc_url;
    var xhr;
    var div;

    /* Step 1: DIV sanity check */
    div = document.getElementById(divId);
    if (null == div) return;

    /* Step 1: build service URL */
    svc_url='svc-'+service+'.php';
    if (null != params) svc_url+='?'+params;

    /* Step 2: Create/setup our XHR */
    xhr = svc_createXHR(svc_url);

    /* Step 3: Setup handler */
    xhr.onreadystatechange = function() {
        if ((this.readyState == 4) && (this.status == 200)) {
            div.innerHTML=this.responseText;
        }
    }

    /* Step 4: Kick off the request */
    xhr.send();
}


// ////////////////////////////////////////////////////////////////////////
// svc_formParameters() -- Generate a parameterized string from a form's 
//                         fields.
//
// @return String of parameters (i.e. <field1>=<value1>&<field2>=<value2>...)
//
function svc_formParameters(formId)
{
    var fields;
    var ret = '';
    /* Step 1: get form from DOM */
    try {
       fields = document.getElementById(formId).elements;
    } catch (err) {
        return ret;
    }
    /* Step 2: Build query strings from all fields */
    try {
        for (i in fields) {
            if (ret != '') ret+='&';
            ret += escape(fields[i].name) + '=' + escape(fields[i].value);
        }
    } catch (err) {
    }

    return ret;
}

