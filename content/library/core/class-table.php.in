<?php
/****************************************************************************
 * class-table.php -- Define a dynamic spreadsheet-style table.
 ***************************************************************************/
/*
 * INCLUDES
 */
require_once("library/core/util-auth.php");


/*
 * akTable -- Basic table object
 *
 * NOTE: The table cell array may contain values that are outside
 *       the range defined by $rows/$colums, but we control the render
 *       based on the metadata, not the contents.
 */
class akTable 
{
  public $dom_id;   // DOM element ID
  public $title;    // Table title
  public $height;   // Number of table rows
  public $width;    // Number of table columns
  public $backing;  // Backing store (filepath)
  public $editable; // Render as editable? 
  public $column_headers; 
  public $row_headers;
  public $cells;    // The array of cells

  /* Private members */


  /* Construction */
    /* See the factory methods below, since we can't
       simply overload the constructor (forms are 
       different, but the types of args are the same!)
      */
  public function __construct($newtitle='Table')
  {
    $this->cells = array(array());
    $this->column_headers= array("CHeading");
    $this->row_headers= array("RHeading");
  }

  public static function fromScratch($newTitle='Table',$colCount='1',$rowCount='1') 
  {
    $instance = new self();
    $instance->title = $newTitle;
    $instance->width = $colCount;
    $instance->height = $rowCount;
    $instance->backing = null;
    return $instance;
  }

  public static function fromFile($backingPath=null) 
  {

  }


  /* Method to emit the HTML for a table */
  function emit()
  {
    print $this->title;
    print '<table>';
    /* Header row */
    print '<tr>';
    print '<th></th>';
    for ($c=0;$c < $this->width; $c++ ) {
      print '<th>'.$this->column_headers[$c].'</th>';
    }
    print '</tr>';
    /* Content rows */
    for ($r = 0; $r < $this->height; $r++) {
      print '<tr>';
        print '<th>'.$this->row_headers[$r].'</th>';
        for ($c =0; $c < $this->width; $c++) {
          print '<td>'.$this->cells[$c][$r].'</td>';
        }
      print '</tr>';
    }
    print '</table>';
  }


}


?>
